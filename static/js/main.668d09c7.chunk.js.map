{"version":3,"sources":["TodoListItem.tsx","TodoList.tsx","TodoForm.tsx","App.tsx","index.tsx"],"names":["TodoListItem","todo","toggleTodo","style","listStyleType","textDecoration","completed","type","checked","onChange","text","TodoList","todos","className","map","key","TodoForm","addTodo","useState","newTodo","setNewTodo","value","e","target","onClick","preventDefault","initialTodos","App","setTodos","selectedTodo","newTodos","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0LAOaA,EAA4C,SAAC,GAGnD,IAFLC,EAEI,EAFJA,KACAC,EACI,EADJA,WAEA,OACE,6BACE,wBAAIC,MAAO,CAAEC,cAAe,SAC1B,2BACED,MAAO,CACLE,eAAgBJ,EAAKK,UAAY,eAAiB,SAGpD,2BACEC,KAAK,WACLC,QAASP,EAAKK,UACdG,SAAU,kBAAMP,EAAWD,MAE5BA,EAAKS,SCfHC,EAAoC,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,MAAOV,EAAiB,EAAjBA,WACzD,OACE,yBAAKW,UAAU,UACb,wBAAIA,UAAU,SACXD,EAAME,KAAI,SAACb,GACV,OACE,kBAAC,EAAD,CAAcc,IAAKd,EAAKS,KAAMT,KAAMA,EAAMC,WAAYA,UCVrDc,EAAuC,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAAc,EACrCC,mBAAS,IAD4B,mBAC5DC,EAD4D,KACnDC,EADmD,KAYnE,OACE,yBAAKP,UAAU,SACb,8BACE,2BAAON,KAAK,OAAOc,MAAOF,EAASV,SAZpB,SAACa,GACpBF,EAAWE,EAAEC,OAAOF,UAYhB,4BAAQd,KAAK,SAASiB,QATP,SAACF,GACpBA,EAAEG,iBACFR,EAAQE,GACRC,EAAW,MAMP,aCjBFM,G,MAA4B,CAChC,CAAEhB,KAAM,WAAYJ,WAAW,GAC/B,CAAEI,KAAM,OAAQJ,WAAW,KA8BdqB,EA3BO,WAAO,IAAD,EACAT,mBAASQ,GADT,mBACnBd,EADmB,KACZgB,EADY,KAmB1B,OACE,yBAAKf,UAAU,aACb,kBAAC,EAAD,CAAUD,MAAOA,EAAOV,WAlBG,SAAC2B,GAC9B,IAAMC,EAAWlB,EAAME,KAAI,SAACb,GAC1B,OAAIA,IAAS4B,EACJ,eACF5B,EADL,CAEEK,WAAYL,EAAKK,YAGdL,KAET2B,EAASE,MASP,kBAAC,EAAD,CAAUb,QANW,SAACE,GACxBS,EAAS,GAAD,mBAAKhB,GAAL,CAAY,CAAEF,KAAMS,EAASb,WAAW,WCtBpDyB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.668d09c7.chunk.js","sourcesContent":["import React from \"react\";\n\ninterface TodoListItemProps {\n  todo: Todo;\n  toggleTodo: ToggleTodo;\n}\n\nexport const TodoListItem: React.FC<TodoListItemProps> = ({\n  todo,\n  toggleTodo,\n}) => {\n  return (\n    <div>\n      <li style={{ listStyleType: \"none\" }}>\n        <label\n          style={{\n            textDecoration: todo.completed ? \"line-through\" : \"none\",\n          }}\n        >\n          <input\n            type=\"checkbox\"\n            checked={todo.completed}\n            onChange={() => toggleTodo(todo)}\n          />\n          {todo.text}\n        </label>\n      </li>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { TodoListItem } from \"./TodoListItem\";\n// import { List, Typography, Divider } from \"antd\";\n\ninterface TodoListProps {\n  todos: Array<Todo>;\n  toggleTodo: ToggleTodo;\n}\n\nexport const TodoList: React.FC<TodoListProps> = ({ todos, toggleTodo }) => {\n  return (\n    <div className=\"items2\">\n      <ul className=\"items\">\n        {todos.map((todo) => {\n          return (\n            <TodoListItem key={todo.text} todo={todo} toggleTodo={toggleTodo} />\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n","import React, { useState, ChangeEvent, FormEvent } from \"react\";\n\ninterface AddTodoFormProps {\n  addTodo: AddTodo;\n}\nexport const TodoForm: React.FC<AddTodoFormProps> = ({ addTodo }) => {\n  const [newTodo, setNewTodo] = useState(\"\");\n\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setNewTodo(e.target.value);\n  };\n\n  const handleSubmit = (e: FormEvent<HTMLButtonElement>) => {\n    e.preventDefault();\n    addTodo(newTodo);\n    setNewTodo(\"\");\n  };\n  return (\n    <div className=\"formy\">\n      <form>\n        <input type=\"text\" value={newTodo} onChange={handleChange} />\n        <button type=\"submit\" onClick={handleSubmit}>\n          sumbit\n        </button>\n      </form>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport { TodoList } from \"./TodoList\";\nimport { TodoForm } from \"./TodoForm\";\nimport \"./App.css\";\nconst initialTodos: Array<Todo> = [\n  { text: \"Make Bed\", completed: true },\n  { text: \"Code\", completed: false },\n];\n\nconst App: React.FC = () => {\n  const [todos, setTodos] = useState(initialTodos);\n\n  const toggleTodo: ToggleTodo = (selectedTodo) => {\n    const newTodos = todos.map((todo) => {\n      if (todo === selectedTodo) {\n        return {\n          ...todo,\n          completed: !todo.completed,\n        };\n      }\n      return todo;\n    });\n    setTodos(newTodos);\n  };\n\n  const addTodo: AddTodo = (newTodo) => {\n    setTodos([...todos, { text: newTodo, completed: false }]);\n  };\n  return (\n    <div className=\"container\">\n      <TodoList todos={todos} toggleTodo={toggleTodo} />\n      <TodoForm addTodo={addTodo} />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}